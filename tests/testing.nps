/scope {0 dict begin} def

/export 0 dict def

/state 0 dict def

state begin
  /title () def
  /tests [] def
  /addTest {
    scope
    /t exch def
    [tests {} forall t]
    end

    /tests exch def
  } def
end

export begin

/settitle {
  state {/title exch def} scoped
} def

/expect {
  scope
  /val exch def
  /test exch def
  [val /test load]
  state begin
    addTest
  end
  end
} def

/runall {
  scope
  /gettitle {state {title} scoped} def

  /count 1 def

  gettitle (BEGIN TEST '%f'\n) printf

  state {tests} scoped
  {
    {} forall
    exch
    /expec exch def
    exec

    expec
    eq
    {(PASSED)}
    {(FAILED)}
    ifelse

    count exch expec exch (CASE %f, expecting %d -- %f\n) printf

    /count count 1 add def
  } forall

  gettitle (END TEST '%f'\n) printf
  
  end
} def
